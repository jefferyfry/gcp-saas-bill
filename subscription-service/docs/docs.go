// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-09-08 22:05:37.104914 -0700 PDT m=+0.317214709

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://www.cloudbees.com/products/terms-service",
        "contact": {
            "name": "CloudBees Support",
            "url": "http://support.cloudbees.com",
            "email": "support@cloudbees.com"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounts": {
            "put": {
                "description": "Upsert an account passing account json",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Upsert an account",
                "operationId": "jenkins-support-saas-subscription-service-upsert-account",
                "parameters": [
                    {
                        "description": "Account",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/persistence.Account"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Upserted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/accounts/{accountName}": {
            "get": {
                "description": "Retrieves an account by account name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get an account",
                "operationId": "jenkins-support-saas-subscription-service-get-account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account Name",
                        "name": "accountName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/persistence.Account"
                        }
                    },
                    "400": {
                        "description": "Missing account name in path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete an account",
                "operationId": "jenkins-support-saas-subscription-service-delete-account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account Name",
                        "name": "accountName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing account name in path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/entitlements": {
            "put": {
                "description": "Upsert an entitlement passing entitlement json",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Upsert an entitlement",
                "operationId": "jenkins-support-saas-subscription-service-upsert-entitlement",
                "responses": {
                    "204": {
                        "description": "Upserted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/entitlements/{entitlementName}": {
            "get": {
                "description": "Retrieves an entitlement by entitlement name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get an entitlement",
                "operationId": "jenkins-support-saas-subscription-service-get-entitlement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entitlement Name",
                        "name": "entitlementName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/persistence.Entitlement"
                        }
                    },
                    "400": {
                        "description": "Missing entitlement name in path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an entitlement",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete an entitlement",
                "operationId": "jenkins-support-saas-subscription-service-delete-entitlement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entitlement Name",
                        "name": "entitlementName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing entitlement name in path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "persistence.Account": {
            "type": "object",
            "properties": {
                "approvals": {
                    "type": "string"
                },
                "company": {
                    "type": "string"
                },
                "createTime": {
                    "type": "string"
                },
                "emailAddress": {
                    "type": "string"
                },
                "firstName": {
                    "description": "signup fields",
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "name": {
                    "description": "google fields",
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "updateTime": {
                    "type": "string"
                }
            }
        },
        "persistence.Entitlement": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "createTime": {
                    "type": "string"
                },
                "messageToUser": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "newPendingPlan": {
                    "type": "string"
                },
                "plan": {
                    "type": "string"
                },
                "product": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "state": {
                    "type": "integer"
                },
                "updateTime": {
                    "type": "string"
                },
                "usageReportingId": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "localhost:8085",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
